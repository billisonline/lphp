name: MacOS build test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    permissions:
      contents: write
    env:
      RELEASE: '0.03'
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Delete release if it already exists
        run: |
          gh release list --json tagName -q '.[] | .tagName' | grep -xqF ${{ env.RELEASE }} \
            && gh release delete ${{ env.RELEASE }} \
            || echo "No existing release ${{ env.RELEASE }}"

      - name: Create release
        run: gh release create ${{ env.RELEASE }}

      - name: Build PHP for macOS
        run: ./ci/build-php.sh
      
      - name: Add PHP for macOS to release
        run: gh release upload ${{ env.RELEASE }} ./build/output/php-macos.zip

      - name: Generate installer patch template
        run: ./ci/generate-installer-patch.sh > ./templates/install-vphp.patch

      - name: Build VPHP runner, installer, and patch from templates
        run: |
          sed "s|__CURRENT_RELEASE__|$RELEASE|g" ./templates/vphp > ./build/output/vphp
          sed "s|__CURRENT_RELEASE__|$RELEASE|g" ./templates/install-vphp > ./build/output/install-vphp
          sed "s|__CURRENT_RELEASE__|$RELEASE|g" ./templates/install-vphp.patch > ./build/output/install-vphp.patch

      - name: Add VPHP, installer script, and installer patch to release
        run: |
          gh release upload ${{ env.RELEASE }} \
            ./build/output/vphp \
            ./build/output/install-vphp \
            ./build/output/install-vphp.patch
            
