#!/bin/bash

set -e

RELEASE="__CURRENT_RELEASE__"
RELEASE_BASE_URL="https://github.com/billisonline/phpw/releases/download/${RELEASE}"

PHPW_BIN_DIR="./vendor/bin/phpw"

PHP_BIN_PATH="${PHPW_BIN_DIR}/php"
COMPOSER_BIN_PATH="${PHPW_BIN_DIR}/composer.phar"

throw() { echo "$1"; exit 1; }

install-composer-if-not-installed() {
    local COMPOSER_PHAR_URL="https://getcomposer.org/download/2.8.8/composer.phar"
    local COMPOSER_PHAR_FILENAME="composer.phar"
    local COMPOSER_SHA256="957263e284b9f7a13d7f475dc65f3614d151b0c4dcc7e8761f7e7f749447fb68"

    if [ -f "$COMPOSER_BIN_PATH" ]; then
        return 0
    fi

    mkdir -p "$PHPW_BIN_DIR"

    (
        cd "$PHPW_BIN_DIR"

        curl -sL "$COMPOSER_PHAR_URL" > "$COMPOSER_PHAR_FILENAME"

        if ! (sha256sum "$COMPOSER_PHAR_FILENAME" | grep -q "$COMPOSER_SHA256"); then
            rm "$COMPOSER_PHAR_FILENAME"

            throw 'Invalid checksum for composer.phar'
        fi
    )
}

OS_LINUX='linux'
OS_MACOS='macos'
OS_CURRENT=''

case "$(uname)" in
    'Linux')
        OS_CURRENT="$OS_LINUX"
        ;;
    'Darwin')
        OS_CURRENT="$OS_MACOS"
        ;;
    *)
        throw 'Only Linux and macOS are supported.'
esac

get-sha256-hash() {
    cat "$1" | sha256sum | cut -d" " -f1
}

install-php-if-not-installed() {
    if [ -f "$PHP_BIN_PATH" ]; then
        return 0
    fi

    mkdir -p "$PHPW_BIN_DIR"

    local PHP_ZIP_FILENAME=''

    if  [ "$OS_CURRENT" == "$OS_LINUX" ]; then
        PHP_ZIP_FILENAME='php-linux.zip'
    else
        PHP_ZIP_FILENAME='php-macos.zip'
    fi

    local PHP_ZIP_SIGNATURE_FILENAME="${PHP_ZIP_FILENAME}.sig"
    local PHP_ZIP_SHA256_FILENAME="${PHP_ZIP_FILENAME}.sha256"

    local PHP_ZIP_URL="${RELEASE_BASE_URL}/${PHP_ZIP_FILENAME}"
    local PHP_ZIP_SIGNATURE_URL="${RELEASE_BASE_URL}/${PHP_ZIP_SIGNATURE_FILENAME}"
    local PHP_ZIP_SHA256_URL="${RELEASE_BASE_URL}/${PHP_ZIP_SHA256_FILENAME}"

    (
        cd "$PHPW_BIN_DIR"

        curl -sL "$PHP_ZIP_URL" > "$PHP_ZIP_FILENAME"

        if (which gpg > /dev/null); then
            curl -sL "$PHP_ZIP_SIGNATURE_URL" > "$PHP_ZIP_SIGNATURE_FILENAME"

            gpg --verify "$PHP_ZIP_SIGNATURE_FILENAME" "$PHP_ZIP_FILENAME" \
                || throw "Couldn't verify signature of PHP archive: $PHP_ZIP_FILENAME"
        else
            echo 'WARNING: gpg is not installed, falling back to verifying PHP binary by hash (sha256)'

            curl -sL "$PHP_ZIP_SHA256_URL" > "$PHP_ZIP_SHA256_FILENAME"

            [ "$(get-sha256-hash "$PHP_ZIP_FILENAME")" == "$(cat "$PHP_ZIP_SHA256_FILENAME")" ] \
                || throw "Couldn't verify hash of PHP archive: $PHP_ZIP_FILENAME"
        fi

        unzip "$PHP_ZIP_FILENAME"

        rm "$PHP_ZIP_FILENAME"
    )
}

phpw-meta-init() {
    if [ -f "composer.json" ] && [ ! -f "vendor/autoload.php" ]; then
        ./phpw composer install
    fi

    # If this is a fresh Laravel install, initialize the project.
    if [ -f "artisan" ] && [ ! -f ".env" ]; then
        ./phpw composer run post-root-package-install
        ./phpw composer run post-create-project-cmd
    fi
}

install-composer-if-not-installed
install-php-if-not-installed

# Auto-init if we're running Laravel Artisan for the fist time.
if [ "$1" == 'artisan' ] && [ ! -f "vendor/autoload.php" ]; then
    ./phpw m:init
fi

# Run the meta command if called.
if [ "$1" == "m:init" ]; then phpw-meta-init; exit 0; fi

# Rewrite the first argument if we want to run a composer command.
if [ "$1" == 'composer' ]; then
    set -- "$COMPOSER_BIN_PATH" "${@:2}"
fi

"$PHP_BIN_PATH" "$@"
